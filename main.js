// Generated by CoffeeScript 1.6.1
var HandleBarsBuilder, HandleBarsConditionTranslator, HandleBarsElseTranslator, HandleBarsLoopTranslator, HandleBarsVariableTranslator, TemplateBlockList, TemplateTranslator, TemplateTree, TemplateTreeItem;

HandleBarsConditionTranslator = (function() {

  function HandleBarsConditionTranslator() {}

  HandleBarsConditionTranslator.prototype.regVar = new RegExp(/<!-*\s*if\s*(\w*)/i);

  HandleBarsConditionTranslator.prototype.regUnless = new RegExp(/<!-*\s*if\s*!(\w*)/i);

  HandleBarsConditionTranslator.prototype.regEq = new RegExp(/<!-*\s*if\s*(Eq[2]?)\((#*\w*#*),(#*\w*#*)\)/i);

  HandleBarsConditionTranslator.prototype.regLt = new RegExp(/<!-*\s*if\s*(Lt[2]?)\((\w*),(\w*)\)/i);

  HandleBarsConditionTranslator.prototype.regGt = new RegExp(/<!-*\s*if\s*(Gt[2]?)\((\w*),(\w*)\)/i);

  HandleBarsConditionTranslator.prototype.start = function(template) {
    var arCond;
    if (this.regEq.test(template)) {
      arCond = template.match(this.regEq);
      return "{{#ifEq " + arCond[2] + " " + arCond[3] + "}}";
    } else if (this.regLt.test(template)) {
      arCond = template.match(this.regLt);
      return "{{#ifLt " + arCond[2] + " " + arCond[3] + "}}";
    } else if (this.regGt.test(template)) {
      arCond = template.match(this.regGt);
      return "{{#ifGt " + arCond[2] + " " + arCond[3] + "}}";
    } else if (this.regUnless.test(template)) {
      arCond = template.match(this.regUnless);
      return "{{#unless " + arCond[1] + "}}";
    } else if (this.regVar.test(template)) {
      arCond = template.match(this.regVar);
      return "{{#if " + arCond[1] + "}}";
    }
  };

  HandleBarsConditionTranslator.prototype.end = function(template) {
    if (this.regEq.test(template)) {
      return "{{/ifEq}}";
    } else if (this.regLt.test(template)) {
      return "{{/ifLt}}";
    } else if (this.regGt.test(template)) {
      return "{{/ifGt}}";
    } else if (this.regUnless.test(template)) {
      return "{{/unless}}";
    } else if (this.regVar.test(template)) {
      return "{{/if}}";
    }
  };

  return HandleBarsConditionTranslator;

})();

HandleBarsLoopTranslator = (function() {

  function HandleBarsLoopTranslator() {}

  HandleBarsLoopTranslator.prototype.regFor = new RegExp(/<!-*\s*for\s*(\w*)/i);

  HandleBarsLoopTranslator.prototype.start = function(template) {
    var arCond;
    if (this.regFor.test(template)) {
      arCond = template.match(this.regFor);
      return "{{#each " + arCond[1] + "}}";
    }
  };

  HandleBarsLoopTranslator.prototype.end = function(template) {
    if (this.regFor.test(template)) {
      return "{{/each}}";
    }
  };

  return HandleBarsLoopTranslator;

})();

HandleBarsElseTranslator = (function() {

  function HandleBarsElseTranslator() {}

  HandleBarsElseTranslator.prototype.regElse = new RegExp(/<!-*\s*else\s*-*>/ig);

  HandleBarsElseTranslator.prototype.start = function(template) {
    return template.replace(this.regElse, "{{else}}");
  };

  return HandleBarsElseTranslator;

})();

HandleBarsVariableTranslator = (function() {

  function HandleBarsVariableTranslator() {}

  HandleBarsVariableTranslator.prototype.regVar = new RegExp(/##\.?(.*?)##/g);

  HandleBarsVariableTranslator.prototype.start = function(template) {
    return template.replace(this.regVar, "{{$1}}");
  };

  return HandleBarsVariableTranslator;

})();

HandleBarsBuilder = (function() {

  function HandleBarsBuilder(templateTree) {
    this.tree = templateTree;
    this.conditionTranslator = new HandleBarsConditionTranslator;
    this.loopTranslator = new HandleBarsLoopTranslator;
    this.elseTranslator = new HandleBarsElseTranslator;
    this.variableTranslator = new HandleBarsVariableTranslator;
    this.result = '';
    this.translateNode(this.tree.root);
  }

  HandleBarsBuilder.prototype.translateNode = function(node) {
    var item, _i, _len, _ref, _results;
    _ref = node.children;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      this.result += '\n' + this.translateCode(item);
      if (!item.isSimple) {
        _results.push(this.translateNode(item));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  HandleBarsBuilder.prototype.translateCode = function(item) {
    var result;
    result = item.code;
    if (item.isCond) {
      result = this.conditionTranslator.start(item.code);
    } else if (item.isClosed && item.startItem.isCond) {
      result = this.conditionTranslator.end(item.startItem.code);
    } else if (item.isLoop) {
      result = this.loopTranslator.start(item.code);
    } else if (item.isClosed && item.startItem.isLoop) {
      result = this.loopTranslator.end(item.startItem.code);
    }
    result = this.elseTranslator.start(result);
    return result = this.variableTranslator.start(result);
  };

  HandleBarsBuilder.prototype.get = function() {
    return this.result;
  };

  return HandleBarsBuilder;

})();

TemplateTreeItem = (function() {

  TemplateTreeItem.prototype.regCond = new RegExp(/<!-*\s*if/ig);

  TemplateTreeItem.prototype.regElse = new RegExp(/<!-*\s*else/ig);

  TemplateTreeItem.prototype.regLoop = new RegExp(/<!-*\s*for/ig);

  TemplateTreeItem.prototype.regEndCond = new RegExp(/<!-*\s*\/if/ig);

  TemplateTreeItem.prototype.regEndLoop = new RegExp(/<!-*\s*\/for/ig);

  function TemplateTreeItem(code) {
    this.children = [];
    this.code = code;
    this.isSimple = this.code.indexOf('<!--') === -1;
    this.isCond = this.code.search(this.regCond) !== -1;
    this.isElse = this.code.search(this.regElse) !== -1;
    this.isLoop = this.code.search(this.regLoop) !== -1;
    this.isEndCond = this.code.search(this.regEndCond) !== -1;
    this.isEndLoop = this.code.search(this.regEndLoop) !== -1;
  }

  TemplateTreeItem.prototype.addChild = function(item) {
    return this.children.push(item);
  };

  TemplateTreeItem.prototype.isClose = function(item) {
    return this.isCond && item.isEndCond || this.isLoop && item.isEndLoop;
  };

  return TemplateTreeItem;

})();

TemplateBlockList = (function() {

  function TemplateBlockList() {
    this.blocks = [];
    this.index = 0;
  }

  TemplateBlockList.prototype.push = function(item) {
    return this.blocks.push(item);
  };

  TemplateBlockList.prototype.next = function() {
    if (this.index + 1 > this.getLength()) {
      return null;
    } else {
      return this.blocks[this.index++];
    }
  };

  TemplateBlockList.prototype.getLength = function() {
    return this.blocks.length;
  };

  return TemplateBlockList;

})();

TemplateTree = (function() {

  TemplateTree.prototype.regStart = new RegExp(/<!--/ig);

  TemplateTree.prototype.regEnd = new RegExp(/<!--\s*\//ig);

  TemplateTree.prototype.regClose = new RegExp(/-->/ig);

  function TemplateTree(template) {
    var block;
    this.source = template;
    this._template = template;
    this.blocks = new TemplateBlockList;
    while (block = this.getNextBlock()) {
      if (block) {
        this.blocks.push(new TemplateTreeItem(block));
      }
    }
    this.buildTree();
  }

  TemplateTree.prototype.buildTree = function() {
    this.root = new TemplateTreeItem('');
    return this.buildNode(this.root);
  };

  TemplateTree.prototype.buildNode = function(item) {
    var block, _results;
    _results = [];
    while (block = this.blocks.next()) {
      item.addChild(block);
      if (item.isClose(block)) {
        block.isClosed = true;
        block.startItem = item;
        break;
      } else if (!block.isSimple && !block.isElse) {
        _results.push(this.buildNode(block));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  TemplateTree.prototype.getNextBlock = function() {
    var block, pos, posEnd, posStart;
    posStart = this._template.search(this.regStart);
    posEnd = this._template.search(this.regEnd);
    pos = Math.min(posStart, posEnd);
    if (pos === 0) {
      pos = this._template.search(this.regClose) + 3;
    }
    block = this._template.substr(0, pos);
    if (pos === -1) {
      if (!this._last) {
        block = this._template;
        this._last = true;
      } else {
        block = null;
      }
    }
    this._template = this._template.substr(pos);
    return block;
  };

  return TemplateTree;

})();

TemplateTranslator = (function() {

  function TemplateTranslator(template) {
    this.source = template;
    this.buildTree();
  }

  TemplateTranslator.prototype.buildTree = function() {
    return this.tree = new TemplateTree(this.source);
  };

  TemplateTranslator.prototype.toHandleBars = function() {
    return new HandleBarsBuilder(this.tree).get();
  };

  return TemplateTranslator;

})();

module.exports = TemplateTranslator;
